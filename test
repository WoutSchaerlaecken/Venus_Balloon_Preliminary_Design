from functions import *
from inputs import *
import numpy as np
from constants import *
import matplotlib.pyplot as plt
from Venus_atmosphere import venus_atmosphere



H1_values = np.linspace(40, 50, 6)  # Define a range of H1 values for iteration
H2_values = np.linspace(55, 65, 21)  # Define a range of H2 values for iteration

balloon_ratio = 1/3

inflation_mass = 2
sample_collection_mass = 1

iterations = []
H1_list = []
H2_list = []
ZP_balloon_masses = []
SP_balloon_masses = []
balloon_masses = []
total_masses = []

for H1 in H1_values:
    T1, p1, _ = venus_atmosphere(H1)
    gondola_mass = payload_mass / probe.payload_percentage + sample_collection_mass + inflation_mass
    DP1 = 3000

    for H2 in H2_values:
        T2, p2, _ = venus_atmosphere(H2)
        DP2 = T2 / T1 * DP1

        total_mass = 2 * gondola_mass

        for i in range(20):
            n_sp1 = ((p1 + DP1) * V_SP) / (R * T1)
            n_sp2 = ((p2 + DP2) * V_SP) / (R * T2)

            n_zp1 = (R_Venus / R) * (total_mass - p1 / (R_Venus * T1) * V_SP)
            n_zp2 = (R_Venus / R) * (total_mass - p2 / (R_Venus * T2) * V_SP)

            V_zp1 = n_zp1 * R * T1 / p1 + V_SP
            V_zp = n_zp2 * R * T2 / p2 + V_SP
            r_zp = (3 * V_zp / (4 * np.pi)) ** (1/3)

            r_sp = r_zp * balloon_ratio
            V_SP = 4 / 3 * np.pi * r_sp**3

            ZP_balloon_mass = Balloon_mass(V_zp, balloon_material_density)
            SP_Balloon_mass = Balloon_mass(V_SP, SP_balloon_material_density)

            He_mass = (n_sp1 + n_sp2) * Mhe

            total_mass = gondola_mass + ZP_balloon_mass + SP_Balloon_mass + He_mass

        iterations.append((H1, H2))
        H1_list.append(H1)
        H2_list.append(H2)
        ZP_balloon_masses.append(ZP_balloon_mass)
        SP_balloon_masses.append(SP_Balloon_mass)
        balloon_masses.append(ZP_balloon_mass + SP_Balloon_mass)
        total_masses.append(total_mass)

gondola_volume = gondola_mass / gondola_density
gondola_size = gondola_volume ** (1/3)

# Plot the results
plt.figure(figsize=(10, 6))

# Plot total masses for each H1
for H1 in H1_values:
    indices = [i for i, h1 in enumerate(H1_list) if h1 == H1]
    plt.plot([H2_list[i] for i in indices], [total_masses[i] for i in indices], label=f'H1 = {H1} km')

# Add labels, legend, and title
plt.xlabel('H2 Altitude (km)')
plt.ylabel('Total Mass (kg)')
plt.title('Total Mass vs H2 Altitude for Different H1 Values')
plt.legend()
plt.grid(True)

# Show the plot
plt.tight_layout()
plt.show()
